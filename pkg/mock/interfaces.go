// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=../mock/interfaces.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	http "net/http"
	os "os"
	reflect "reflect"

	generated "github.com/eschercloudai/baski/pkg/server/generated"
	gomock "go.uber.org/mock/gomock"
)

// MockHandlerInterface is a mock of HandlerInterface interface.
type MockHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerInterfaceMockRecorder
}

// MockHandlerInterfaceMockRecorder is the mock recorder for MockHandlerInterface.
type MockHandlerInterfaceMockRecorder struct {
	mock *MockHandlerInterface
}

// NewMockHandlerInterface creates a new mock instance.
func NewMockHandlerInterface(ctrl *gomock.Controller) *MockHandlerInterface {
	mock := &MockHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlerInterface) EXPECT() *MockHandlerInterfaceMockRecorder {
	return m.recorder
}

// ApiV1GetScan mocks base method.
func (m *MockHandlerInterface) ApiV1GetScan(w http.ResponseWriter, r *http.Request, imageId generated.ImageID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApiV1GetScan", w, r, imageId)
}

// ApiV1GetScan indicates an expected call of ApiV1GetScan.
func (mr *MockHandlerInterfaceMockRecorder) ApiV1GetScan(w, r, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApiV1GetScan", reflect.TypeOf((*MockHandlerInterface)(nil).ApiV1GetScan), w, r, imageId)
}

// Healthz mocks base method.
func (m *MockHandlerInterface) Healthz(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Healthz", w, r)
}

// Healthz indicates an expected call of Healthz.
func (mr *MockHandlerInterfaceMockRecorder) Healthz(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthz", reflect.TypeOf((*MockHandlerInterface)(nil).Healthz), w, r)
}

// MockS3Interface is a mock of S3Interface interface.
type MockS3Interface struct {
	ctrl     *gomock.Controller
	recorder *MockS3InterfaceMockRecorder
}

// MockS3InterfaceMockRecorder is the mock recorder for MockS3Interface.
type MockS3InterfaceMockRecorder struct {
	mock *MockS3Interface
}

// NewMockS3Interface creates a new mock instance.
func NewMockS3Interface(ctrl *gomock.Controller) *MockS3Interface {
	mock := &MockS3Interface{ctrl: ctrl}
	mock.recorder = &MockS3InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Interface) EXPECT() *MockS3InterfaceMockRecorder {
	return m.recorder
}

// FetchFromS3 mocks base method.
func (m *MockS3Interface) FetchFromS3(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFromS3", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFromS3 indicates an expected call of FetchFromS3.
func (mr *MockS3InterfaceMockRecorder) FetchFromS3(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFromS3", reflect.TypeOf((*MockS3Interface)(nil).FetchFromS3), arg0)
}

// PutToS3 mocks base method.
func (m *MockS3Interface) PutToS3(arg0, arg1, arg2 string, arg3 io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutToS3", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutToS3 indicates an expected call of PutToS3.
func (mr *MockS3InterfaceMockRecorder) PutToS3(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutToS3", reflect.TypeOf((*MockS3Interface)(nil).PutToS3), arg0, arg1, arg2, arg3)
}

// MockVaultInterface is a mock of VaultInterface interface.
type MockVaultInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVaultInterfaceMockRecorder
}

// MockVaultInterfaceMockRecorder is the mock recorder for MockVaultInterface.
type MockVaultInterfaceMockRecorder struct {
	mock *MockVaultInterface
}

// NewMockVaultInterface creates a new mock instance.
func NewMockVaultInterface(ctrl *gomock.Controller) *MockVaultInterface {
	mock := &MockVaultInterface{ctrl: ctrl}
	mock.recorder = &MockVaultInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVaultInterface) EXPECT() *MockVaultInterfaceMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockVaultInterface) Fetch(mountPath, secretPath, data string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", mountPath, secretPath, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockVaultInterfaceMockRecorder) Fetch(mountPath, secretPath, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockVaultInterface)(nil).Fetch), mountPath, secretPath, data)
}

// MockSSHInterface is a mock of SSHInterface interface.
type MockSSHInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSSHInterfaceMockRecorder
}

// MockSSHInterfaceMockRecorder is the mock recorder for MockSSHInterface.
type MockSSHInterfaceMockRecorder struct {
	mock *MockSSHInterface
}

// NewMockSSHInterface creates a new mock instance.
func NewMockSSHInterface(ctrl *gomock.Controller) *MockSSHInterface {
	mock := &MockSSHInterface{ctrl: ctrl}
	mock.recorder = &MockSSHInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSHInterface) EXPECT() *MockSSHInterfaceMockRecorder {
	return m.recorder
}

// CopyFromRemoteServer mocks base method.
func (m *MockSSHInterface) CopyFromRemoteServer(srcPath, dstPath, filename string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFromRemoteServer", srcPath, dstPath, filename)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyFromRemoteServer indicates an expected call of CopyFromRemoteServer.
func (mr *MockSSHInterfaceMockRecorder) CopyFromRemoteServer(srcPath, dstPath, filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFromRemoteServer", reflect.TypeOf((*MockSSHInterface)(nil).CopyFromRemoteServer), srcPath, dstPath, filename)
}

// SFTPClose mocks base method.
func (m *MockSSHInterface) SFTPClose() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SFTPClose")
	ret0, _ := ret[0].(error)
	return ret0
}

// SFTPClose indicates an expected call of SFTPClose.
func (mr *MockSSHInterfaceMockRecorder) SFTPClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SFTPClose", reflect.TypeOf((*MockSSHInterface)(nil).SFTPClose))
}

// SSHClose mocks base method.
func (m *MockSSHInterface) SSHClose() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHClose")
	ret0, _ := ret[0].(error)
	return ret0
}

// SSHClose indicates an expected call of SSHClose.
func (mr *MockSSHInterfaceMockRecorder) SSHClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHClose", reflect.TypeOf((*MockSSHInterface)(nil).SSHClose))
}
