// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZTW/jNhD9KwRboBfFduIFuvBt27Rbo0ALJGl6SIOClsYWNxKpJUdO0kD/vRjKlkSL",
	"tpPNB3LwLRGp4cybN4+j8QOPdV5oBQotnzzwQhiRA4Jx/8lcLGB66v5UfMILgSmPuBI58Em9eiQTHnED",
	"X0tpIOETNCVE3MYp5ILeS8DGRhYoNRm4SIFNT5meM6GYe5/NtWG3qYxThpotABmmwGwsFDNgywwt7Rjw",
	"iON9QadaNFIteFVVdKwttLLgnFUaf9WlSs5WD/un/6XELAM6Zy5VwgSdoEsTw4CTtdppZyteWhv2/ufL",
	"X1giUJBHEiGvUTO6AIOydmSRWhf69wbmfMK/G7YQD1dnDOmACwqoirhaJk/ZbiBJBT7+DQpthZ2efYEY",
	"yUiz3AvykwuRXtgR4vLkPNYGwhBZWqIcY41XIHkRX55cQozaPMfE+NlOjJ/pRBDbFESGaQjZNV+JgoLV",
	"+xjVDlgk63An8iJz1m5C/rqKOXNlETLvqkaohCFYXJUPi3U+kwoSz/4Dp721JcsnVy3j1+RtMrw+vpuy",
	"zrNxf9t4c1vL8Re22pbCixquog1om81zeQfJJRi78VwqiyLLgmvFzeKPWjCbRxaWYCTee36UmQIjZjKT",
	"eE+a27hzHXFKqJctTXlEElxOisu3eqy8o6vrKtooZY8IuzWFtlrC3XNn9zu01fJgnXTYbEN0zqRFKr/6",
	"npieWjY3OvfuBo/UVw9cJttjj1yo/1oUWNruY3LxfOMpge7j1LkLt91ppBNu22Br8dZM+FYTFMDa06Bi",
	"uTXPjoMraKwb9mON4UqoNmUwkN2WV7tyuyuZB0l6z5LkV8c6V/taEr4ZSJ8anf/X5CtEfLOtJvz4Q0Re",
	"1otMqnWjSQ+7sTFpmbPD5JyJoshkTJ1iuIx7uO460w+AYSrwB8saG8ETmuyEDJOmPQaWNp/B2l6tri15",
	"aIRbpU0u7NawfQZbxRDGiHtfMF7jNnhxQd+mefYgdwe5O8jdQe72yF3bQ4dYEessg7ghRfs958YhzfSk",
	"pyHf/F3QY3hradO7v1PAFIwL3HnW7CV35trkpAid/rqOfKZ1BkLxiN8dLfRR5+neKiGwA3WypRtdB7eP",
	"T3ubWS9X9pCm952myqnVXPct/iTsjWTnYJZgSPsEQ60zhppBPRGsN6BmqVgCZU0U0okXo/t6BuxrCUZC",
	"QluKMsvcBJDpsm5IcMCmyGawKBUTZP0f5ey7/qSVYG+mubJLxiCpdwqVsFRYtjD6VjErVUwCCvXHm0Q3",
	"FupGQjdWc9eNBqPBMWGqC1CikHzCx4PRYEy3n8DUcWUoCjlcHg8dJYcP6/Ft5ZoOcDJE1BKE2pSo+amQ",
	"l8efAae001lqh8NX4cuv3TJc91dEWm9QezIa1dRVCModu7qD6ODhF1tTqx0h77pkuxOxqt82/Pk7YfJh",
	"9GGbncaxYW987EbCZZ4LQ13C5+5kemPGtlns9KYHtn0cxJa/DVL29aESfr9u2UxYSJhWvVLw4aKVp1Dz",
	"PHZS9Q6Z2Zl/vAHaHUT7gNpHwfiq7Ot+3L0h+bYTjcr3KUS7AIvvk2idRvINkO3I3grQ+meM/7Yi+Ntq",
	"/RUhWP3isiV8L4ozwNIoy/QNu01BMdt0BVplUjn1dt8T9LhOsm/xFJaQ6SInpyNemoxP+PHJjwN3A08+",
	"jj6OeHVd/R8AAP//X048b1gdAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
