// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xWTW/bMAz9K4K2oxenTU+5bShWBAM2oO166XZgbMZWa0uqRLstCv/3gXJiJ3b20bm3",
	"RKYen574KL7IxJTWaNTk5fJFWnBQIqEL/1QJGa7Ow08tl9IC5TKSGkqUy/brB5XKSDp8qJTDVC7JVRhJ",
	"n+RYAu9L0SdOWVKGAa5zFKtzYTYCtAj7xcY48ZirJBdkRIYkKEfhE9DCoa8K8hwxk5GkZ8tZPTmlM9k0",
	"Daf11miPgaw29NlUOr3cLo6zf9ewLpDzbJROBXAGU7kEZ5LRWtIBK6m9P86ez878maWF5B4ylJFUhGWr",
	"nzMWHamWUpb7IMJ7hxu5lO/iXux4my3mVNd8tCaSuk5fE+4wzYH+fQcfcquiWd9hQgzSfZ5+3Pr0KjHu",
	"VUiDS41kfXqDCRk3DWTxBkQWk4kc1ZtL+zJU9hj5437hc83jE5S2QLm87WtyV1Sd2rt8++LtrS3GYYth",
	"WF97b4zal+ibAjfRQLkueKOeML1B5wfrSnuCojj6zd5nX9uW1i15rNEpej7gURUaHaxVoeiZu2JH52c0",
	"cMLurv7mSzk8yISCPTz5BKCxVBPAOm0nYPSXMcXPw9v7f1uPXN0E1TZmDPoJ/L0SV+hqdEJ5AYKMKfgJ",
	"wvYxagPIiBxq5FcRrBKUAwnuBGsUDxU6hSmH2KooRAoEwlTENBXNxIrEGrNKC2D0Hzrgb5wpd6/q8Dnd",
	"4jIYpm0k6FTk4EXmzKMWXukEeZ8Oz64ibkAHJ2EzdDaaz+azE1bYWNRglVzKxWw+W7CxgPLggxisiuuT",
	"mInEL7vBoQntDEN7YPcAi7ZKuRFadXNygXSVgA44/VRye9xVfUi8m1rYlgcTwul8HsxpNKEOWcHaQiUh",
	"b3zn21LvZ5c/uXevjTfjdvTtCwtyNj/7HUzHKx6NLWEUqcoSHHefCyQB+xfI6ZpfAQAA//+p58iNtwkA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
