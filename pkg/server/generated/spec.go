// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWwXLjNgz9FQzbo2o58Z58a2en20xn2plkm8u2B1iCJa4lkktCyqYZ/XsHlC05ktM2",
	"VXqzRfABeOR7xJPKbO2sIcNBbZ+UQ481Mfn4T9dY0M37+NOorXLIpUqUwZrUtl/9TucqUZ6+NNpTrrbs",
	"G0pUyEqqUfblFDKvHWsrAB9Lgpv3YPeABuJ+2FsPD6XOSmALBTFwSRAyNOApNBUHiVipRPGjk6yBvTaF",
	"6rpO0gZnTaBYrLH8o21Mfnv8OM/+m8FdRZJnr00OKBls4zNaKUHri45YWRvC5eqld6lfqnSYHbAglSjN",
	"VPf8eevIs+5LKsoQSfjW015t1TfpSHZ6zJZKqo/SWpco0+avCfeUl8j/foc0eWTR7j5TxgIyLC9vt72+",
	"y6x/FdLkUBPVXt9TxtYvA9m8QSGbxYVc5LskrLico34Pp9ssFxShjwNRFgVWiaKvWLsqgh0uFSyauY2S",
	"uQR+pqjVOdin8bKfbutwjCfw81M5+7aZh22mYeOlfmPU8e6/KXCXTJgbgvf6K+X35MPkuzaBsaourrlD",
	"8UvvlcOnQC15zY/P6mgqQx53utL8KHY7lPNHMpHY6az+SfBq2sgCJTzvfAHQnKoFYAO3CzDGw1hiFNPT",
	"++9+MbOLLrK2t3PQHzAcNNyRb8mDDoDA1lZiHdS/cn0AWyixJXlu0WngEhnECXYEXxrymnIJcU1VQY6M",
	"YBuWMjWv4IZhR0VjAAX9dxPx997Wp+d6+k4fcQWM8j4STQ4lBii8fTAQtMlI9pn4nmuObnbeiYhhkNF6",
	"tV5dCcPWkUGn1VZtVuvVRoSFXEYdpOh02l6lUkj6dJpIumhnFO1B1INC2k0uRuj0/dUH4rsMTcQZx51P",
	"l1U1hqSncUhk+Wz0uF6vozitYTIxKzpX6SzmTT+H/qqPQ9HfqffMxru5Hf36sxDybv3uJZihrnQ2D8UZ",
	"p6lr9OI+H4gBzw8wrqf9s/PniwT+dFz/Hxk4vpAvdP+siVvixpsA9gAPJRkIgx6sqbSJM0/3VwAAAP//",
	"YKzUCuQKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
